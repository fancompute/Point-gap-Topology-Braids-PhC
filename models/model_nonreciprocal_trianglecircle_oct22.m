%
% Aug22_trianglecircle.m
%
% Model exported on Aug 3 2022, 21:39 by COMSOL 5.5.0.359.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('C:\Users\Janet\Dropbox\Fan Rotation\Code\Aug22_Comsol_Braiding\Comsol model files');

model.label('Aug22_trianglecircle.mph');

model.param.set('a', '4 [cm]');
model.param.set('k1', '0');
model.param.set('k2', '0.950000000000001');
model.param.set('epsd', num2str(epsd_re+1j*epsd_im));
model.param.set('epsa',  num2str(epsa));
model.param.set('epsz', '1');

model.component.create('comp1', true);

model.component('comp1').geom.create('geom1', 2);

model.component('comp1').mesh.create('mesh1');

model.component('comp1').geom('geom1').create('sq1', 'Square');
model.component('comp1').geom('geom1').feature('sq1').label('Square Base');
model.component('comp1').geom('geom1').feature('sq1').set('size', 'a');
model.component('comp1').geom('geom1').create('pol3', 'Polygon');
model.component('comp1').geom('geom1').feature('pol3').label('Triangle Rod 2');
model.component('comp1').geom('geom1').feature('pol3').set('x', '0.7*a, 0.2*a, 0.8*a');
model.component('comp1').geom('geom1').feature('pol3').set('y', '0.3*a, 0.9*a, 0.8*a');
model.component('comp1').geom('geom1').create('pol5', 'Polygon');
model.component('comp1').geom('geom1').feature('pol5').active(false);
model.component('comp1').geom('geom1').feature('pol5').label('Triangle Rod 2.1');
model.component('comp1').geom('geom1').feature('pol5').set('x', '0.1*a, 0.2*a, 0.5*a');
model.component('comp1').geom('geom1').feature('pol5').set('y', '0.6*a, 0.2*a, 0.3*a');
model.component('comp1').geom('geom1').create('c1', 'Circle');
model.component('comp1').geom('geom1').feature('c1').set('pos', {'0.25*a' '0.3*a'});
model.component('comp1').geom('geom1').feature('c1').set('r', '0.2*a');
model.component('comp1').geom('geom1').run;

model.component('comp1').variable.create('var1');
model.component('comp1').variable('var1').set('kx', 'k1*pi/a');
model.component('comp1').variable('var1').set('ky', 'k2*pi/a');

model.material.create('mat1', 'Common', '');
model.component('comp1').material.create('mat2', 'Common');
model.material.create('mat3', 'Common', '');
model.component('comp1').material.create('mat4', 'Common');
model.component('comp1').material.create('mat5', 'Common');
model.component('comp1').material.create('mat6', 'Common');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.component('comp1').material('mat2').selection.set([1]);
model.component('comp1').material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.component('comp1').material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.component('comp1').material('mat2').propertyGroup('def').func.create('rho', 'Analytic');
model.component('comp1').material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.component('comp1').material('mat2').propertyGroup('def').func.create('cs', 'Analytic');
model.component('comp1').material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.component('comp1').material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.component('comp1').material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.component('comp1').material('mat4').selection.set([2 3]);
model.component('comp1').material('mat6').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.component('comp1').material('mat6').propertyGroup.create('RefractiveIndex', 'Refractive index');

model.component('comp1').physics.create('ewfd', 'ElectromagneticWavesFrequencyDomain', 'geom1');
model.component('comp1').physics('ewfd').create('pc1', 'PeriodicCondition', 1);
model.component('comp1').physics('ewfd').feature('pc1').selection.set([2 3]);
model.component('comp1').physics('ewfd').create('pc2', 'PeriodicCondition', 1);
model.component('comp1').physics('ewfd').feature('pc2').selection.set([1 7]);

model.component('comp1').mesh('mesh1').autoMeshSize(1);

model.component('comp1').view('view1').axis.set('xmin', -0.008475806564092636);
model.component('comp1').view('view1').axis.set('xmax', 0.048475805670022964);
model.component('comp1').view('view1').axis.set('ymin', -0.0029314514249563217);
model.component('comp1').view('view1').axis.set('ymax', 0.0429314523935318);

model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('dermethod', 'manual');
model.material('mat1').propertyGroup('def').func('rho').set('argders', {'pA' 'd(pA*0.02897/R_const/T,pA)'; 'T' 'd(pA*0.02897/R_const/T,T)'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'Pa,K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '0' '1'; 'T' '0' '1'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('dermethod', 'manual');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('argunit', 'Pa,K');
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').descr('thermalexpansioncoefficient_symmetry', '');
model.material('mat1').propertyGroup('def').descr('molarmass_symmetry', '');
model.material('mat1').propertyGroup('def').descr('bulkviscosity_symmetry', '');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').descr('relpermeability_symmetry', '');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').descr('relpermittivity_symmetry', '');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').descr('dynamicviscosity_symmetry', '');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').descr('ratioofspecificheat_symmetry', '');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').descr('electricconductivity_symmetry', '');
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').descr('heatcapacity_symmetry', '');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').descr('density_symmetry', '');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').descr('thermalconductivity_symmetry', '');
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').descr('soundspeed_symmetry', '');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', '');
model.material('mat1').propertyGroup('RefractiveIndex').set('ki', '');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('RefractiveIndex').set('ki', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat1').propertyGroup('RefractiveIndex').descr('n_symmetry', '');
model.material('mat1').propertyGroup('RefractiveIndex').descr('ki_symmetry', '');
model.material('mat1').propertyGroup('NonlinearModel').set('BA', '(def.gamma+1)/2');
model.material('mat1').propertyGroup('NonlinearModel').descr('BA_symmetry', '');
model.component('comp1').material('mat2').label('Air');
model.component('comp1').material('mat2').set('family', 'air');
model.component('comp1').material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.component('comp1').material('mat2').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.component('comp1').material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.component('comp1').material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.component('comp1').material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.component('comp1').material('mat2').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.component('comp1').material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.component('comp1').material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.component('comp1').material('mat2').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.component('comp1').material('mat2').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.component('comp1').material('mat2').propertyGroup('def').func('rho').set('dermethod', 'manual');
model.component('comp1').material('mat2').propertyGroup('def').func('rho').set('argders', {'pA' 'd(pA*0.02897/R_const/T,pA)'; 'T' 'd(pA*0.02897/R_const/T,T)'});
model.component('comp1').material('mat2').propertyGroup('def').func('rho').set('argunit', 'Pa,K');
model.component('comp1').material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.component('comp1').material('mat2').propertyGroup('def').func('rho').set('plotargs', {'pA' '0' '1'; 'T' '0' '1'});
model.component('comp1').material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.component('comp1').material('mat2').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.component('comp1').material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.component('comp1').material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.component('comp1').material('mat2').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.component('comp1').material('mat2').propertyGroup('def').func('cs').set('args', {'T'});
model.component('comp1').material('mat2').propertyGroup('def').func('cs').set('dermethod', 'manual');
model.component('comp1').material('mat2').propertyGroup('def').func('cs').set('argunit', 'K');
model.component('comp1').material('mat2').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.component('comp1').material('mat2').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.component('comp1').material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.component('comp1').material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.component('comp1').material('mat2').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.component('comp1').material('mat2').propertyGroup('def').func('an1').set('argunit', 'Pa,K');
model.component('comp1').material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.component('comp1').material('mat2').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.component('comp1').material('mat2').propertyGroup('def').func('an2').set('funcname', 'muB');
model.component('comp1').material('mat2').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.component('comp1').material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.component('comp1').material('mat2').propertyGroup('def').func('an2').set('argunit', 'K');
model.component('comp1').material('mat2').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.component('comp1').material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.component('comp1').material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.component('comp1').material('mat2').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.component('comp1').material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.component('comp1').material('mat2').propertyGroup('def').descr('thermalexpansioncoefficient_symmetry', '');
model.component('comp1').material('mat2').propertyGroup('def').descr('molarmass_symmetry', '');
model.component('comp1').material('mat2').propertyGroup('def').descr('bulkviscosity_symmetry', '');
model.component('comp1').material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.component('comp1').material('mat2').propertyGroup('def').descr('relpermeability_symmetry', '');
model.component('comp1').material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.component('comp1').material('mat2').propertyGroup('def').descr('relpermittivity_symmetry', '');
model.component('comp1').material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.component('comp1').material('mat2').propertyGroup('def').descr('dynamicviscosity_symmetry', '');
model.component('comp1').material('mat2').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.component('comp1').material('mat2').propertyGroup('def').descr('ratioofspecificheat_symmetry', '');
model.component('comp1').material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.component('comp1').material('mat2').propertyGroup('def').descr('electricconductivity_symmetry', '');
model.component('comp1').material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.component('comp1').material('mat2').propertyGroup('def').descr('heatcapacity_symmetry', '');
model.component('comp1').material('mat2').propertyGroup('def').set('density', 'rho(pA,T)');
model.component('comp1').material('mat2').propertyGroup('def').descr('density_symmetry', '');
model.component('comp1').material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.component('comp1').material('mat2').propertyGroup('def').descr('thermalconductivity_symmetry', '');
model.component('comp1').material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.component('comp1').material('mat2').propertyGroup('def').descr('soundspeed_symmetry', '');
model.component('comp1').material('mat2').propertyGroup('def').addInput('temperature');
model.component('comp1').material('mat2').propertyGroup('def').addInput('pressure');
model.component('comp1').material('mat2').propertyGroup('RefractiveIndex').set('n', '');
model.component('comp1').material('mat2').propertyGroup('RefractiveIndex').set('ki', '');
model.component('comp1').material('mat2').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.component('comp1').material('mat2').propertyGroup('RefractiveIndex').set('ki', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.component('comp1').material('mat2').propertyGroup('RefractiveIndex').descr('n_symmetry', '');
model.component('comp1').material('mat2').propertyGroup('RefractiveIndex').descr('ki_symmetry', '');
model.material('mat3').label('Weyl');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').descr('relpermeability_symmetry', '');
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat3').propertyGroup('def').descr('electricconductivity_symmetry', '');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'epsd' '-i*epsa' '0' 'i*epsa' 'epsd' '0' '0' '0' 'epsz'});
model.material('mat3').propertyGroup('def').descr('relpermittivity_symmetry', '');
model.component('comp1').material('mat4').label('Weyl');
model.component('comp1').material('mat4').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.component('comp1').material('mat4').propertyGroup('def').set('relpermeability_symmetry', '0');
model.component('comp1').material('mat4').propertyGroup('def').descr('relpermeability_symmetry', '');
model.component('comp1').material('mat4').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.component('comp1').material('mat4').propertyGroup('def').descr('electricconductivity_symmetry', '');
model.component('comp1').material('mat4').propertyGroup('def').set('relpermittivity', {'epsd' '-i*epsa' '0' 'i*epsa' 'epsd' '0' '0' '0' 'epsz'});
model.component('comp1').material('mat4').propertyGroup('def').descr('relpermittivity_symmetry', '');
model.component('comp1').material('mat5').label('Weyl 1');
model.component('comp1').material('mat5').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.component('comp1').material('mat5').propertyGroup('def').descr('relpermeability_symmetry', '');
model.component('comp1').material('mat5').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.component('comp1').material('mat5').propertyGroup('def').descr('electricconductivity_symmetry', '');
model.component('comp1').material('mat5').propertyGroup('def').set('relpermittivity', {'epsd' 'i*epsa' '0' '-i*epsa' 'epsd' '0' '0' '0' 'epsz'});
model.component('comp1').material('mat5').propertyGroup('def').descr('relpermittivity_symmetry', '');
model.component('comp1').material('mat6').label('Silicon');
model.component('comp1').material('mat6').set('family', 'custom');
model.component('comp1').material('mat6').set('specular', 'custom');
model.component('comp1').material('mat6').set('customspecular', [0.7843137254901961 1 1]);
model.component('comp1').material('mat6').set('diffuse', 'custom');
model.component('comp1').material('mat6').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.component('comp1').material('mat6').set('ambient', 'custom');
model.component('comp1').material('mat6').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.component('comp1').material('mat6').set('noise', true);
model.component('comp1').material('mat6').set('noisefreq', 1);
model.component('comp1').material('mat6').set('lighting', 'cooktorrance');
model.component('comp1').material('mat6').set('fresnel', 0.7);
model.component('comp1').material('mat6').set('roughness', 0.5);
model.component('comp1').material('mat6').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.component('comp1').material('mat6').propertyGroup('def').descr('relpermeability_symmetry', '');
model.component('comp1').material('mat6').propertyGroup('def').set('electricconductivity', {'1e-12[S/m]' '0' '0' '0' '1e-12[S/m]' '0' '0' '0' '1e-12[S/m]'});
model.component('comp1').material('mat6').propertyGroup('def').descr('electricconductivity_symmetry', '');
model.component('comp1').material('mat6').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});
model.component('comp1').material('mat6').propertyGroup('def').descr('thermalexpansioncoefficient_symmetry', '');
model.component('comp1').material('mat6').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');
model.component('comp1').material('mat6').propertyGroup('def').descr('heatcapacity_symmetry', '');
model.component('comp1').material('mat6').propertyGroup('def').set('relpermittivity', {'11.7' '0' '0' '0' '11.7' '0' '0' '0' '11.7'});
model.component('comp1').material('mat6').propertyGroup('def').descr('relpermittivity_symmetry', '');
model.component('comp1').material('mat6').propertyGroup('def').set('density', '2329[kg/m^3]');
model.component('comp1').material('mat6').propertyGroup('def').descr('density_symmetry', '');
model.component('comp1').material('mat6').propertyGroup('def').set('thermalconductivity', {'130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]'});
model.component('comp1').material('mat6').propertyGroup('def').descr('thermalconductivity_symmetry', '');
model.component('comp1').material('mat6').propertyGroup('Enu').set('youngsmodulus', '170e9[Pa]');
model.component('comp1').material('mat6').propertyGroup('Enu').descr('youngsmodulus_symmetry', '');
model.component('comp1').material('mat6').propertyGroup('Enu').set('poissonsratio', '0.28');
model.component('comp1').material('mat6').propertyGroup('Enu').descr('poissonsratio_symmetry', '');
model.component('comp1').material('mat6').propertyGroup('RefractiveIndex').set('n', '');
model.component('comp1').material('mat6').propertyGroup('RefractiveIndex').set('ki', '');
model.component('comp1').material('mat6').propertyGroup('RefractiveIndex').set('n', {'3.48' '0' '0' '0' '3.48' '0' '0' '0' '3.48'});
model.component('comp1').material('mat6').propertyGroup('RefractiveIndex').set('ki', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.component('comp1').material('mat6').propertyGroup('RefractiveIndex').descr('n_symmetry', '');
model.component('comp1').material('mat6').propertyGroup('RefractiveIndex').descr('ki_symmetry', '');

model.component('comp1').physics('ewfd').prop('MeshControl').set('SizeControlParameter', 'UserDefined');
model.component('comp1').physics('ewfd').prop('MeshControl').set('PhysicsControlledMeshMaximumElementSize', 0.005);
model.component('comp1').physics('ewfd').prop('MeshControl').set('ResolveWaveInLossyMedia', true);
model.component('comp1').physics('ewfd').prop('components').set('components', 'inplane');
model.component('comp1').physics('ewfd').feature('wee1').set('DisplacementFieldModel', 'RelativePermittivity');
model.component('comp1').physics('ewfd').feature('pc1').set('PeriodicType', 'Floquet');
model.component('comp1').physics('ewfd').feature('pc1').set('kFloquet', {'kx'; 'ky'; '0'});
model.component('comp1').physics('ewfd').feature('pc2').set('PeriodicType', 'Floquet');
model.component('comp1').physics('ewfd').feature('pc2').set('kFloquet', {'kx'; 'ky'; '0'});

model.study.create('std1');
model.study('std1').create('param', 'Parametric');
model.study('std1').create('eig', 'Eigenfrequency');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').attach('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').create('d1', 'Direct');
model.sol.create('sol2');
model.sol('sol2').study('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').study('std1');

model.result.create('pg1', 'PlotGroup2D');
model.result.create('pg2', 'PlotGroup2D');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg1').create('surf1', 'Surface');
model.result('pg2').set('data', 'dset2');
model.result('pg2').create('surf1', 'Surface');
model.result('pg3').set('data', 'dset2');
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('data', 'dset2');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').selection.all;
model.result('pg3').feature('lngr1').set('expr', 'real(freq)');

model.study('std1').feature('param').set('pname', {'k1'});
model.study('std1').feature('param').set('plistarr', {'range(-1,0.1,1)'});
model.study('std1').feature('param').set('punit', {''});
model.study('std1').feature('param').set('plot', true);
model.study('std1').feature('eig').set('neigs', num2str(NO_EIGENS));
model.study('std1').feature('eig').set('neigsactive', true);
model.study('std1').feature('eig').set('eigunit', 'Hz');
model.study('std1').feature('eig').set('shift', '3e9');
model.study('std1').feature('eig').set('ngen', 5);

model.sol('sol1').attach('std1');
model.sol('sol1').feature('e1').set('transform', 'eigenfrequency');
model.sol('sol1').feature('e1').set('neigs', num2str(NO_EIGENS));
model.sol('sol1').feature('e1').set('shift', '3e9');
model.sol('sol1').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('e1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol1').runAll;
